users:
	- REGISTER/ADD (POST /users/new? /users/register? - lets have at least ip address to harden sec. against mass registration)
	- EDIT (POST /users/edit/<user_id>?)
	- DELETE (POST /users/delete/<user_id>?)

login:
	- LOGIN (POST /users/login)
	- LOGOUT (POST /users/logout {'login':'','token':''} user:token?)
	- LOGOUT FROM ALL (POST /users/logoutall {'login':'','token':''} user:token?)
	- RECOVER PASSWORD (POST /users/recover {'email':''})

boards:
	- LIST (GET /boards ?)
	- LIST TOPICS (GET /boards/<board_id>? )
	- ADD (POST /boards/new)
	- EDIT (POST /boards/edit/<board_id>?)
	- DELETE (POST /boards/delete/<board_id>)

posts:
	- NEW TOPIC (see 'topics:')
	- REPLY (POST /posts/<post_id>/reply)
	- EDIT (POST /posts/<post_id>/edit)
	- DELETE (POST /posts/<post_id>/delete)
	- GET POST (GET /posts/<post/id>)

topics (relation BOARDS x POSTS):
	RELATIONSHIP between boards and posts
	- LIST TOPICS (GET /boards/<board_id>/topics maybe extra metadata as title, description, no. of posts, replies etc)
	- GET TOPIC (GET /boards/<board_id>/topics/<topic_id>)
	- NEW TOPIC (POST /boards/<board_id>/topics)

threads:
	- GET THREAD (GET /threads/<post_id>? this is thread's "OP" and it's children)
	- GET THREAD TREE (GET /threads/<post_id>/tree? this is thread's "OP" parent and it's children, maybe only metadata (titles and ids))
	- GET THREAD UPTREE (GET /threads/<post_id>/uptree get from TOPIC POST tu current POST_ID this is an idea.)

groups:
	- LIST GROUPS (GET /groups - return "[group] [arguments] [[userlist] or [metadata]]")
	- LIST GROUP USERS (GET /groups/<group_id>/<arguments> - return "[group] [arguments] [userlist] [extra metadata]")
	- LIST USER GROUPS (GET /groups/by_username/<user_id>)

	- ADD USER TO "[group] [arguments]" (POST; user, which permission (which function, which args, eg. 'moderator','first board'), then check for permission to see if the user has it)
	- DELETE(delete)

index (route GET '/'):
	- METADATA
		- BOARD TITLE
		- BOARD LIST
		- EXTRA BBS METADATA (no. of: users, boards, topics, replies etc)

THREADS are POSTS and their children. All TOPICS are THREADS, but not all THREADS are TOPICS, ie., only reply_to_id == 0 are TOPICS.
so, we are going to implement three forms of fetching posts:
a. TOPICS (threads with reply_to_id==0 and a MAX_CHILDREN_FETCH set by DEFAULT or by CLIENT_REQUEST)
b. THREADS (posts with their children)
b.1. - THREADTHREE returns the three to from the TOPIC, to the CURRENT POST, and it's CHILDREN.ONLY DATA. OR NOT.
c. POSTS (the post only, without parent or children, but giving reference to their parent ID, and number of children)

deletes are implementing soft delete
maybe lets make a HARDDELETE, with same routes as /delete/ but extra code for hard deleting stuff

lets make the api legible and give tools, ie., options/freedom for how the clients will choose to fetch data

REMEMBER TO CREATE THE:

- THREAD TOOLS to count the threading according to the BBS configuration for max thread children.
- GROUP TOOLS to manage users permissions.
